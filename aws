EC2 : Elastic Computer Cloud

1.탄력적 IP 생성
2.인스턴스 접근을 위한 pem키 사용
3.리눅스설정
    3.1 java 설치
        -sudo yum install -y java-1.9.0-openjdk-devel.x86_64 > 설치
        -sudo /usr/sbin/alternatives --config java > 변경
        -sudu yum remove java-1.7.0-openjdk
    3.2 타임존 변경
        -sudo rm /etc/localtime
        -sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime
        -date
    3.3 Hostname 변경
        -sudo vim /etc/sysconfig/network
        -sudo reboot
        -sudu vim /etc/hosts
        -127.0.0.1 [hostname]
        -curl [hostname]

*참조
https://velog.io/@swchoi0329/AWS-%EC%84%9C%EB%B2%84-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95

AWS RDS

1.MariaDB 선택
2.RDS 운영환경에 맞는 파라미터 설정
    -타임존
    -Character Set
    -Max Connection
3.EC2와 RDS 간에 접근 가능 하도록
    -내 PC의 IP를 등록

4.intelliJ plugin 으로 접속확인 : database plugin

5.접속 후 shema생성
    -create database whitecrow;

6.character set 확인 후 변경
    -ALTER DATABASE whitecrow
     CHARACTER SET = 'utf8mb4'
     COLLATE = 'utf8mb4_general_ci';

7.test 테이블 생성
    CREATE TABLE test (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    content varchar(255) DEFAULT NULL,
    PRIMARY KEY (id)
    ) ENGINE=InnoDB;

8.ec2에서 접속
    8.1 mysql cli 설치
        -sudo yum install mysql
    8.2 RDS 접속
        mysql -u whitecorw -p -h [endpoint]  


*참조
https://velog.io/@swchoi0329/AWS-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95

EC2서버 배포

1.ec2에 git 설치 및 빌드
    sudo yum install git
    git clone [git 주소]
    ./gradlew test >> 권한이 없다면 chmod +x ./gradlew >> test쪽 구현을 안해서 failed ^^
2.수정 후 새버전을 받아야 하는 귀찮음
3.배포 스크립트 만들기
    #! /bin/bash

    REPOSITORY=/home/ec2-user/app/step1
    PROJECT_NAME=SpringBootWebService

    cd $REPOSITORY/$PROJECT_NAME/

    echo "> Git Pull"

    git pull

    echo "> Start Building Project"

    ./gradlew build

    echo "> Change Directory to Test"

    cd $REPOSITORY

    echo "> Copy Build Files"

    cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/

    echo "> Check Current Application Pids"

    # pgrep : process id만 추출
    # -f : process 이름으로 검색
    CURRENT_PID=$(pgrep -f ${PROJECT_NAME}*.jar)

    echo "> Current Application Pids : $CURRENT_PID"

    if [ -z "$CURRENT_PID" ] ; then
        echo "> 현재 구동중인 애플리케이션이 없으므로 종료하지 않습니다."

    else
        echo "> kill -15 $CURRENT_PID"
        kill -15 $CURRENT_PID
        sleep 5
    fi

    echo "> Deploy New Application"

    # 새로 실행할 jar파일 찾아서
    # 여러 jar파일 중 가장 마지막(최신) 파일을 변수에 저장
    JAR_NAME=$(ls -tr $REPOSITORY/ | grep *.jar | tail -n 1)

    echo "> JAR NAME : JAR_NAME"

    # nohup으로 파일 실행
    # application-oauth.properties 파일 위치 설정
    nohup java -jar \
            -Dspring.config.location=classpath:/application.properties,/home/ec2-user/app/application-oauth.yml \
            $REPOSITORY/$JAR_NAME 2>&1 &
        

    4.실행권한 추가 및 실행
        chmod +x ./deploy.sh
        ./deploy.sh

    5.외부 Security 파일 등록

        application-oauth.yml 작성

    6.ec2에 db설정

        spring.jpa.hibernate.ddl-auto=none

        spring.datasource.url=jdbc:mariadb://rds주소:포트명(기본은 3306)/database명
        spring.datasource.username=db계정
        spring.datasource.password=db계정 비밀번호
        spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

    7.
        netstat -tnlp | grep "8080"
        kill -9 [processid]           

    8.
        http://ec2-15-164-140-225.ap-northeast-2.compute.amazonaws.com:8080/ >> ec2 주소등록



AWS Key 발급

1.IAM(Identity and Access Management)    
    -사용자 이름 생성
    -권한 추가 AmazonS3FullAccess, AWSCodeDeployFullAccess

2.TravisCI 환경 변수 설정
    -AWS_ACCESS_KEY, AWS_SECRET_KEY 등록

3.S3버킷 생성
    -


--334 page 시작